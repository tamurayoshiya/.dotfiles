# Language Support: HTML, CSS
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'htmldjango', 'css', 'php', 'eruby']

# Language Support:  JavaScript
[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug']
[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
[[plugins]]
repo = 'vuejs/eslint-plugin-vue'
on_ft = ['vue']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescriptreact', 'vue']

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'javascript.jsx', 'vue']
[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'javascript.jsx']
[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['javascript', 'javascript.jsx']

# Language Support: TypeScript
[[plugins]]
repo  = 'jason0x43/vim-js-indent'
on_ft = ['typescript', 'typescriptreact']

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['typescript', 'typescriptreact']
[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
on_ft = ['typescript', 'typescriptreact']

[[plugins]]
repo = 'yuezk/vim-js'
on_ft = ['typescript', 'typescriptreact']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['typescript', 'typescriptreact']

[[plugins]] # Svelte.js
repo = 'evanleck/vim-svelte'
on_ft = ['svelte']

# Language Support: PHP
[[plugins]]
repo = 'StanAngeloff/php.vim'
on_ft = ['php']

# Language Support: Ruby
[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ['ruby']
hook_add = '''
    let g:endwise_no_mappings=1
    augroup vimrc-ruby-settings
    autocmd!
    autocmd FileType ruby imap <expr> <CR> pumvisible() ? "\<C-Y>\<Plug>DiscretionaryEnd" : "\<CR>\<Plug>DiscretionaryEnd"
    augroup END
'''

# Language Support: prisma
[[plugins]]
repo = 'prisma/vim-prisma'
on_ft = ['prisma']

# Language Support: Go
# [[plugins]]
# repo = 'fatih/vim-go'
# on_ft = 'go'
# hook_source = '''
#   let g:go_fmt_command = 'goimports'
#   let s:goargs = expand('%:p:h:s#\v^.+/src/##')
#   let g:neomake_go_errcheck_maker = {
#     \ 'args': ['-abspath', s:goargs],
#     \ 'append_file': 0,
#     \ 'errorformat': '%f:%l:%c:\ %m, %f:%l:%c\ %#%m',
#     \ }
#   let g:neomake_go_enabled_makers = ['go', 'golint', 'govet', 'errcheck']
#   " LSPに任せる機能をOFFにする
#   let g:go_def_mapping_enabled = 0
#   let g:go_doc_keywordprg_enabled = 0
# '''
[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'
[[plugins]]
repo = 'fatih/molokai'
[[plugins]]
repo  = 'zchee/deoplete-go'
if    = 'has("python3")'
on_ft = 'go'

# Language Support: Haskell
[[plugins]]
repo = 'itchyny/vim-haskell-indent'
on_ft = ['haskell']
[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = ['haskell']
[[plugins]]
repo = 'nbouscal/vim-stylish-haskell'
on_ft = ['haskell']
[[plugins]]
repo = 'Twinside/vim-hoogle'
on_ft = ['haskell']
[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = ['haskell']
[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']

# Language Support: Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
let g:rustfmt_autosave = 1
'''
on_ft = ['rust']

# Language Support: Clojure
[[plugins]]
repo = 'guns/vim-clojure-static'
on_ft = ['clojure']
[[plugins]]
repo = 'tpope/vim-fireplace'
on_ft = ['clojure']

# Language Support: etc
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
[[plugins]]
repo = 'groenewege/vim-less'
on_ft = ['less']
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffeescript']
[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['pu', 'uml', 'plantuml']
[[plugins]]
repo = 'kovisoft/slimv'
on_ft = ['lisp']
[[plugins]]
repo = 'vim-scripts/groovy.vim'
on_ft = ['groovy']
[[plugins]]
repo = 'dylon/vim-antlr'
on_ft = ['antlr']
[[plugins]]
repo = 'ElmCast/elm-vim'
on_ft = ['elm']
[[plugins]]
repo = 'reasonml-editor/vim-reason-plus'
on_ft = ['reason']

[[plugins]]
repo = 'rescript-lang/vim-rescript'
on_ft = ['rescript']

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['tf', 'terraform']


[[plugins]]
repo = 'github/copilot.vim'
on_cmd = 'Copilot'
hook_source = '''
  let g:copilot_enabled = v:true
  imap <silent><script><expr> <C-K> copilot#Accept("\<CR>")
  imap <C-a><C-s>   <Plug>(copilot-suggest)
  imap <C-a><C-p>   <Plug>(copilot-previous)
  imap <C-l>        <Plug>(copilot-next)
  imap <C-a><C-j>   <Plug>(copilot-dismiss)
  let g:copilot_no_tab_map = v:true
'''
